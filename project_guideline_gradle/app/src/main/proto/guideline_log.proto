// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto2";

package guideline;

import "google/protobuf/timestamp.proto";

// option cc_api_version = 2;
// option java_api_version = 2;
option java_multiple_files = true;
option java_package = "com.google.research.guideline.proto";
option optimize_for = LITE_RUNTIME;

message GuidelineLog {
  repeated GuidelineLogEvent event = 1;
}

// Next available index: 12
message GuidelineLogEvent {
  optional google.protobuf.Timestamp timestamp = 1;
  optional uint64 frame_timestamp_us = 2;

  oneof guideline_event {
    TrackingStateChanged tracking_state_changed = 3;
    CameraPoseUpdated camera_pose_updated = 4;
    LineDetectorResults line_detector_results = 5;
    WorldUpdate world_update = 6;
    ControlSignal control_signal = 7;
    PointCloud point_cloud = 8;
    OccupancyMap occupancy_map = 9;
    DepthEstimationResults depth_estimation_results = 10;
    CameraImage camera_image = 11;
  }

  message CameraImage {}

  message TrackingStateChanged {
    optional bool tracking = 1;
  }

  message CameraPoseUpdated {
    optional Transformation transformation = 1;
    optional bytes image_data = 2;
  }

  message OccupancyMap {
    repeated Vector2 grid_centroids = 1;

    // The occupancy map as packed values [x, y, occupancy].
    repeated float packed_occupancy = 2 [packed = true];
  }

  message PointCloud {
    repeated WorldPoint world_points = 1 [deprecated = true];

    // Packed version of world_points to miminize storage space. Each entry
    // consists of 4 values: [x, y, z, confidence].
    repeated float packed_world_point = 2 [packed = true];
  }

  message WorldPoint {
    optional Vector3 point = 1;
    optional double confidence = 2;
  }

  message SegmentationMask {
    optional int32 width = 1;
    optional int32 height = 2;
    optional bytes values = 3;
  }

  message LineKeypoint {
    optional double x = 1;
    optional double y = 2;
    optional double score = 3;
  }

  message LineHit {
    optional LineKeypoint keypoint = 1;
    optional Vector3 hit_translation = 2;
    optional double hit_distance = 3;
  }

  message LineDetectorResults {
    optional SegmentationMask segmentation_mask = 1;
    repeated LineKeypoint keypoints = 2;
  }

  message WorldUpdate {
    repeated LineHit hit = 1;
  }

  message DepthEstimationResults {
    optional DepthMap depth_map = 1;
  }

  message DepthMap {
    optional uint32 width = 1;
    optional uint32 height = 2;
    repeated float value = 3 [packed = true];
  }

  message ControlSignal {
    optional float lateral_movement_meters = 1;
    optional float rotation_movement_degrees = 2;
    optional float turn_angle_degrees = 3;
    optional Vector3 turn_point = 4;
    optional bool stop = 5;
    optional bool obstacle_ahead = 6;
  }

  message Transformation {
    optional Vector3 translation = 1;
    optional Quaternion rotation = 2;
  }

  message Vector3 {
    optional double x = 1;
    optional double y = 2;
    optional double z = 3;
  }

  message Vector2 {
    optional double x = 1;
    optional double y = 2;
  }

  message Quaternion {
    optional double w = 1;
    optional double x = 2;
    optional double y = 3;
    optional double z = 4;
  }
}
